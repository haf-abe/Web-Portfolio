*{
    box-sizing: border-box;
    /* this makes styling our width much easier */
    
}
body{
margin: 0;
padding: 0;
/* this will help us to remove all the marfings and paddigns and put every things straight. */
background-color: #A0AFB7;
}

.navbar{
    display:flex;
    justify-content: space-between;
    /* the navbar class has two divs inside it and by selecting justify-content:space-between, we put the two divs side by side and give them a big space. (apart from each other)*/
    align-items: center;
    background-color: #333;
    color: white;
}

.brand-title{
    font-size: 1.5rem;
    width: 35px;
    height: 35px;
    margin: 1.5rem;
    text-align: center;
    border-top-left-radius: 100%;
    border-top-right-radius: 100%;
    border-bottom-left-radius: 100%;
    border-bottom-right-radius: 100%;
    border: white 3px double;
    background-color: rgb(169, 205, 134);
    
}
.navbar-links ul{
margin: 0;
padding: 0;
display: flex;

}

.navbar-links li{
    list-style: none;
}

.navbar-links li a{
    text-decoration:none;
    color: white;
    padding: 1rem;
    display: block; 
    /* display block makes the text show up as a bigger size */

}

/* next we need to add some annimation to the navbar links */

.navbar-links li:hover{
    background-color: green;
}

/* so far we have a non-responsive navbar that works perfectly. but if we need it to be responsive, we need to do more stuff. for example if the screen size is less thatn a certain size, then we want the nav bar links to hide. that is what we will do below. */ 
.toggle-button{
    position: absolute;
    /* this is to force it to sit all the way to the right with out messing with the flow of our other elements */
    top: .75rem;
    right: 1rem;
    /* this right moves the span to the right, if we do not specify it the span bars will be on the left side. */
    display :none;
    /* display:noe; is so that it does not display by default, at this time even if we set display to flex we won't see any difference as the bars are not set yet (our toggle-button doe not have bars yet*/
    flex-direction: column;
    /* directionn culumn makes them display on top of each other */
    justify-content: space-between;
    /* give as much space as possible */
    width: 30px;
    height: 21px;
}
.toggle-button .bar{
    height: 3px;
    width:100%;
    background-color: white;
    border-radius: 10px;
}

/* now we will use media querry which allows us to say, when a certain condition is met, run this function but when it is not met do not run.... */

@media(max-width: 600px){
 .toggle-button{
     display: flex;
 }
 .navbar-links{
     display: none;
     width: 100%;
     /* each navbar link will have 100% width and we can see that when we hover over each link */
 }
 /* the above two codes do hide or expand the navbar links depending the screen size. if the screen size is less than 600px, the navbar links gets hidden and the bar(three barrs show, and if the screen the size is more thatn the 600px specified above, the toggle-button disappears and the navbar links show again. however, the toggle button is not still expandable (unless we expand the screen, we will not be able to see the the hiddedn navbar links) when clicked. for it to be clickeable and show us the hidden navbar links when the screen size is less than 600px, we need to add event listener and to do that we need to use javaScript, later on. */

 .navbar{
     flex-direction: column;
     
     /* when the navbar links are hidden we want them to be underneath the brand Name (ha in this case)
     now the brand name name is above the navbar links */
     align-items: flex-start;
     /* the brand name and the navbar links are at the centre and we want them to move to the left that what flex star do. 
     
     there is still anotherr issue that we need to sole, which is the nav bar links (HOME, CONTACT US...are side by side (in a row) and we want them to be in column when the screen size is too small, less than the amout of screen size specified. to do that we need to addjust the flex -direction of the navbar links ul to be column  look below.*/
 }
 .navbar-links ul{
     flex-direction: column;
     width: 100%;
 }
 .navbar-links li{
     text-align: center;
     /* if not alighned centre they will be on the left side but because we want each of the list items to be centred we use this css. */
 }
 .navbar-links li a{
 padding: 0.4rem;
 /* this is just so that when the screen is too small and when the toggle-button is expanded, the navbar links, which are on column (on top of each other) do not have exajurated gap. that is why we just made the padding in to .4rem.  */
}
.navbar-links.active{
    display: flex;
    /* this determines whether the navbar items (home, contact us... ) should be shown or not. and when it is active, we want it to be displayed in flex.*/

    /* the last thing we need to do for our navbar to work perfectly (in order to expand or hide the navbar links by clicking on the toggle-button (three bars at the top-right side of the page, in this case) is to use a javaScript */

}
}
/* css for the contact detail content */
*{
  box-sizing: border-box;
  /* this makes styling our width much easier */
  
}
body{
margin: 0;
padding: 0;
/* this will help us to remove all the marfings and paddigns and put every things straight. */
background-color: #A0AFB7;
}

.navbar{
  display:flex;
  justify-content: space-between;
  /* the navbar class has two divs inside it and by selecting justify-content:space-between, we put the two divs side by side and give them a big space. (apart from each other)*/
  align-items: center;
  background-color: #333;
  color: white;
}

.brand-title{
  font-size: 1.5rem;
  width: 35px;
  height: 35px;
  margin: 1.5rem;
  text-align: center;
  border-top-left-radius: 100%;
  border-top-right-radius: 100%;
  border-bottom-left-radius: 100%;
  border-bottom-right-radius: 100%;
  border: white 3px double;
  background-color: rgb(169, 205, 134);
  
}
.navbar-links ul{
margin: 0;
padding: 0;
display: flex;

}

.navbar-links li{
  list-style: none;
}

.navbar-links li a{
  text-decoration:none;
  color: white;
  padding: 1rem;
  display: block; 
  /* display block makes the text show up as a bigger size */

}

/* next we need to add some annimation to the navbar links */

.navbar-links li:hover{
  background-color: green;
}

/* so far we have a non-responsive navbar that works perfectly. but if we need it to be responsive, we need to do more stuff. for example if the screen size is less thatn a certain size, then we want the nav bar links to hide. that is what we will do below. */ 
.toggle-button{
  position: absolute;
  /* this is to force it to sit all the way to the right with out messing with the flow of our other elements */
  top: .75rem;
  right: 1rem;
  /* this right moves the span to the right, if we do not specify it the span bars will be on the left side. */
  display :none;
  /* display:noe; is so that it does not display by default, at this time even if we set display to flex we won't see any difference as the bars are not set yet (our toggle-button doe not have bars yet*/
  flex-direction: column;
  /* directionn culumn makes them display on top of each other */
  justify-content: space-between;
  /* give as much space as possible */
  width: 30px;
  height: 21px;
}
.toggle-button .bar{
  height: 3px;
  width:100%;
  background-color: white;
  border-radius: 10px;
}

/* now we will use media querry which allows us to say, when a certain condition is met, run this function but when it is not met do not run.... */

@media(max-width: 600px){
.toggle-button{
   display: flex;
}
.navbar-links{
   display: none;
   width: 100%;
   /* each navbar link will have 100% width and we can see that when we hover over each link */
}
/* the above two codes do hide or expand the navbar links depending the screen size. if the screen size is less than 600px, the navbar links gets hidden and the bar(three barrs show, and if the screen the size is more thatn the 600px specified above, the toggle-button disappears and the navbar links show again. however, the toggle button is not still expandable (unless we expand the screen, we will not be able to see the the hiddedn navbar links) when clicked. for it to be clickeable and show us the hidden navbar links when the screen size is less than 600px, we need to add event listener and to do that we need to use javaScript, later on. */

.navbar{
   flex-direction: column;
   
   /* when the navbar links are hidden we want them to be underneath the brand Name (ha in this case)
   now the brand name name is above the navbar links */
   align-items: flex-start;
   /* the brand name and the navbar links are at the centre and we want them to move to the left that what flex star do. 
   
   there is still anotherr issue that we need to sole, which is the nav bar links (HOME, CONTACT US...are side by side (in a row) and we want them to be in column when the screen size is too small, less than the amout of screen size specified. to do that we need to addjust the flex -direction of the navbar links ul to be column  look below.*/
}
.navbar-links ul{
   flex-direction: column;
   width: 100%;
}
.navbar-links li{
   text-align: center;
   /* if not alighned centre they will be on the left side but because we want each of the list items to be centred we use this css. */
}
.navbar-links li a{
padding: 0.4rem;
/* this is just so that when the screen is too small and when the toggle-button is expanded, the navbar links, which are on column (on top of each other) do not have exajurated gap. that is why we just made the padding in to .4rem.  */
}
.navbar-links.active{
  display: flex;
  /* this determines whether the navbar items (home, contact us... ) should be shown or not. and when it is active, we want it to be displayed in flex.*/

  /* the last thing we need to do for our navbar to work perfectly (in order to expand or hide the navbar links by clicking on the toggle-button (three bars at the top-right side of the page, in this case) is to use a javaScript */

}
}




#page-container{
position: relative;
min-height: 100vh;
}
#content-container{
padding-bottom: 16rem;
}



li a.active {
color: #04AA6D;
background-color: rgba(115, 233, 139, 0.062)
}

input[type=text], select, textarea {
width: 100%;
padding: 12px;
border: 1px solid #ccc;
margin-top: 6px;
margin-bottom: 16px;
resize: vertical;
}

input[type=submit] {
background-color: #04AA6D;
color: white;
padding: 12px 20px;
border: none;
cursor: pointer;
}

input[type=submit]:hover {
background-color: #45a049;
}

/* Style the container/contact section */
.container {
border-radius: 5px;
background-color: #f2f2f2;
padding: 10px;
}

/* Create two columns that float next to eachother */
.column {
float: left;
width: 50%;
margin-top: 6px;
padding: 20px;
}

/* Clear floats after the columns */
.row:after {
content: "";
display: table;
clear: both;
}

/* Responsive layout - when the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
.column, input[type=submit] {
  width: 100%;
  margin-top: 0;
}
}

.footer-content{
display: flex;
align-items: center;
justify-content: center;
flex-direction: column;
text-align: center;
background-color: rgb(144, 143, 143);
}

.socials{
list-style: none;
display: flex;
align-items: center;
justify-content:center;
margin: 1rem 0 1rem 0;


}

.socials li{
margin:0 10px;

}
.socials a{
text-decoration: none;
color:white;

}
.socials a i{
font-size: 1.1rem;
transition: color .5s ease;
}
.socials a:hover i{
color:rgb(96, 185, 109); 
}


li a.active {
  color: #04AA6D;
  background-color: rgba(115, 233, 139, 0.062)
}